{
    "data" : [
        "> ",
        "",
        "> ",
        "sapply(data, length)",
        "Levine_32dim   Samusik_01  Samusik_all \n     6619163      4690656     45448776 \n",
        "> ",
        "",
        "> ",
        "sapply(data[!is_FlowCAP], dim)",
        "     Levine_32dim Samusik_01 Samusik_all\n[1,]       161443      86864      841644\n[2,]           41         54          54\n",
        "> ",
        "sapply(data[is_FlowCAP], function(d) {",
        "+ ",
        "  sapply(d, function(d2) {",
        "+ ",
        "    dim(d2)",
        "+ ",
        "  })",
        "+ ",
        "})",
        "named list()\n",
        "> ",
        "",
        "> ",
        "#Remove cells without labels from data",
        "> ",
        "#For now not done: subsampling for data sets with excessive runtime (> 12 hrs on server)",
        "> ",
        "",
        "> ",
        "ix_subsample <- 1:3",
        "> ",
        "n_sub <- 1000000000000",
        "> ",
        "",
        "> ",
        "for (i in ix_subsample) {",
        "+ ",
        "  if (!is_FlowCAP[i]) {",
        "+ ",
        "    set.seed(123)",
        "+ ",
        "    data[[i]] <- data[[i]][, ]",
        "+ ",
        "    # save subsampled population IDs",
        "+ ",
        "    true_labels_i <- data[[i]][, \"label\", drop = FALSE]",
        "+ ",
        "    files_true_labels_i <- paste0(\"../../results/auto/DensVM/true_labels_DensVM_\", ",
        "+ ",
        "                                  names(data)[i], \".txt\")",
        "+ ",
        "    for (f in files_true_labels_i) {",
        "+ ",
        "      write.table(true_labels_i, file = f, row.names = FALSE, quote = FALSE, sep = \"\\t\")",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "  } else {",
        "+ ",
        "    # FlowCAP data sets",
        "+ ",
        "    for (j in 1:length(data[[i]])) {",
        "+ ",
        "      set.seed(123)",
        "+ ",
        "      data[[i]][[j]] <- data[[i]][[j]][, ]",
        "+ ",
        "      # save subsampled population IDs",
        "+ ",
        "      true_labels_ij <- data[[i]][[j]][, \"label\", drop = FALSE]",
        "+ ",
        "      files_true_labels_ij <- paste0(\"../../results/auto/DensVM/true_labels_DensVM_\", ",
        "+ ",
        "                                     names(data)[i], \"_\", j, \".txt\")",
        "+ ",
        "      for (f in files_true_labels_ij) {",
        "+ ",
        "        write.table(true_labels_ij, file = f, row.names = FALSE, quote = FALSE, sep = \"\\t\")",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# indices of protein marker columns",
        "> ",
        "",
        "> ",
        "marker_cols <- list(",
        "+ ",
        "  Levine_32dim = 5:36, ",
        "+ ",
        "  #Levine_13dim = 1:13, ",
        "+ ",
        "  Samusik_01   = 9:47, ",
        "+ ",
        "  Samusik_all  = 9:47, ",
        "+ ",
        "  Nilsson_rare = c(5:7, 9:18), ",
        "+ ",
        "  Mosmann_rare = c(7:9, 11:21), ",
        "+ ",
        "  FlowCAP_ND   = 3:13, #keep the label ",
        "+ ",
        "  FlowCAP_WNV  = 3:8",
        "+ ",
        ")",
        "> ",
        "sapply(marker_cols, length)",
        "Levine_32dim   Samusik_01  Samusik_all Nilsson_rare Mosmann_rare   FlowCAP_ND \n          32           39           39           13           14           11 \n FlowCAP_WNV \n           6 \n",
        "> ",
        "",
        "> ",
        "# subset data: protein marker columns only",
        "> ",
        "",
        "> ",
        "for (i in 1:length(data)) {",
        "+ ",
        "  if (!is_FlowCAP[i]) {",
        "+ ",
        "    data[[i]] <- data[[i]][, marker_cols[[i]]]",
        "+ ",
        "  } else {",
        "+ ",
        "    for (j in 1:length(data[[i]])) {",
        "+ ",
        "      data[[i]][[j]] <- data[[i]][[j]][, marker_cols[[i]]]",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "sapply(data[!is_FlowCAP], dim)",
        "     Levine_32dim Samusik_01 Samusik_all\n[1,]       161443      86864      841644\n[2,]           32         39          39\n",
        "> ",
        "sapply(data[is_FlowCAP], function(d) {",
        "+ ",
        "  sapply(d, function(d2) {",
        "+ ",
        "    dim(d2)",
        "+ ",
        "  })",
        "+ ",
        "})",
        "named list()\n",
        "> ",
        "",
        "> ",
        "marker_names<- lapply(data, colnames)",
        "> ",
        "#save(marker_names,  file=paste0(DATA_DIR, '/marker_names.RData'))",
        "> ",
        "",
        "> ",
        "####################################################",
        "> ",
        "### load truth (manual gating population labels) ###",
        "> ",
        "####################################################",
        "> ",
        "",
        "> ",
        "# files with true population labels (subsampled labels if subsampling was required for",
        "> ",
        "# this method; see parameters spreadsheet)",
        "> ",
        "MANUAL_DENSITYCUT <- \"../../results/manual/densityCut\"",
        "> ",
        "files_truth <- list(",
        "+ ",
        "  Levine_32dim = file.path(MANUAL_DENSITYCUT, \"true_labels_densityCut_Levine_32dim.txt\"), ",
        "+ ",
        "  Samusik_01   = file.path(MANUAL_DENSITYCUT, \"true_labels_densityCut_Samusik_01.txt\"), ",
        "+ ",
        "  Samusik_all  = file.path(MANUAL_DENSITYCUT, \"true_labels_densityCut_Samusik_all.txt\") ",
        "+ ",
        "  #Nilsson_rare = file.path(MANUAL_DENSITYCUT, \"true_labels_densityCut_Nilsson_rare.txt\"), ",
        "+ ",
        "  #Mosmann_rare = file.path(MANUAL_DENSITYCUT, \"true_labels_densityCut_Mosmann_rare.txt\") ",
        "+ ",
        "  #FlowCAP_ND   = file.path(MANUAL_DENSITYCUT, \"true_labels_densityCut_FlowCAP_ND.txt\"), ",
        "+ ",
        "  #FlowCAP_WNV  = file.path(MANUAL_DENSITYCUT, \"true_labels_densityCut_FlowCAP_WNV.txt\")",
        "+ ",
        ")",
        "> ",
        "# extract true population labels",
        "> ",
        "",
        "> ",
        "clus_truth <- vector(\"list\", length(files_truth))",
        "> ",
        "names(clus_truth) <- names(files_truth)",
        "> ",
        "",
        "> ",
        "#for (i in 1) {",
        "> ",
        "for (i in 2:length(clus_truth)) {",
        "+ ",
        "  ",
        "+ ",
        "  data_truth_i <- read.table(files_truth[[i]], header = TRUE, stringsAsFactors = FALSE)[, \"label\"]",
        "+ ",
        "  clus_truth[[i]] <- data_truth_i",
        "+ ",
        "}",
        "> ",
        "clus_truth[[1]] <- as.integer(unlist(read.table(file = \"../../results/manual/densityCut/true_labels_densityCut_Levine_32dim.txt\", header=FALSE)))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "sapply(clus_truth, length)",
        "Levine_32dim   Samusik_01  Samusik_all \n      161443        86864       841644 \n",
        "> ",
        "",
        "> ",
        "# cluster sizes and number of clusters",
        "> ",
        "# (for data sets with single rare population: 1 = rare population of interest, 0 = all others)",
        "> ",
        "",
        "> ",
        "tbl_truth <- lapply(clus_truth, table)",
        "> ",
        "",
        "> ",
        "tbl_truth",
        "$Levine_32dim\n\n    1     2     3     4     5     6     7     8     9    10    11    12    13    14 \n 1207  3905  2248  3295   304   916 26366 20108 16520 21099  1238   330  6135   513 \n\n$Samusik_01\n\n    1     2     3     4     5     6     7     8     9    10    11    12    13    14 \n  266   292   406   798 13607    59   197  5173    35   703     3  3508  8768  1123 \n   15    16    17    18    19    20    21    22    23    24 \n12045   199   116   420   197   189   961  1016  2974   118 \n\n$Samusik_all\n\n     1 ",
        "     2      3      4      5      6      7      8      9     10     11     12 \n  4241   4067   5646  12479  99356    480   2041  53495    387   6068     29  49717 \n    13     14     15     16     17     18     19     20     21     22     23     24 \n114412  21137  82384   2980   1084   5469   1229   3324   8479   7855  26421   1606 \n\n",
        "> ",
        "sapply(tbl_truth, length)",
        "Levine_32dim   Samusik_01  Samusik_all \n          14           24           24 \n",
        "> ",
        "",
        "> ",
        "# store named objects (for other scripts)",
        "> ",
        "",
        "> ",
        "files_truth_PhenoGraph <- files_truth",
        "> ",
        "clus_truth_PhenoGraph <- clus_truth",
        "> ",
        "save(data[[3]], file='841K.RData')",
        "Error in save(data[[3]], file = \"841K.RData\") : \n  object ‘data[[3]]’ not found\n",
        "> ",
        "#outlier assignment using subspaces as reference set ",
        "> ",
        "########################################################",
        "> ",
        "# S. Grinek 26.07.17",
        "> ",
        "setwd(\"/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/run_methods\")",
        "> ",
        "#load data, labels etc.",
        "> ",
        "library(cytofkit) ",
        "> ",
        "library(fpc)",
        "> ",
        "library(cluster) ",
        "> ",
        "library(Rtsne)",
        "> ",
        "library(rgl)",
        "> ",
        "library(gclus)",
        "> ",
        "library(data.table)",
        "> ",
        "library(flowCore)",
        "> ",
        "library(parallel)",
        "> ",
        "library(Matrix)",
        "> ",
        "library(scales)",
        "> ",
        "library(beepr)",
        "> ",
        "library(gplots)",
        "> ",
        "library(MASS)",
        "> ",
        "seed<-set.seed(12345)",
        "> ",
        "#CALC_NAME = 'DELETE'",
        "> ",
        "CALC_NAME<-'Louvain_L2_k30'",
        "> ",
        "k=30",
        "> ",
        "RES_DIR <- '../../results/outlier_compare2'",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_calculate_AMI.R')",
        "> ",
        "source(\"../helpers/helper_match_evaluate_multiple.R\")",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_louvain_multiple_runs.R')",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_create_snnk_graph.R')",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_match_evaluate_S^w_N.R')",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_match_evaluate_S^u_N.R')",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_match_evaluate_S^w_H.R')",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_match_evaluate_S^u_H.R')",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_match_evaluate_MoC^u.R')",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_match_evaluate_S^w_H.R')",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_evaluate_NMI.R')",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_match_evaluate_multiple.R')",
        "> ",
        "",
        "> ",
        "# subdimensional helpers",
        "> ",
        "######################################################################",
        "> ",
        "#Script to calculate combined probabilistic outlier score",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_find_subdimensions.R')",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_local_outliers.R')",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_convBernully.R')",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_global_outliers.R')",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_topPercentile.R')",
        "> ",
        "library(scales)",
        "> ",
        "library(gplots)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#################",
        "> ",
        "### LOAD DATA ###",
        "> ",
        "#################",
        "> ",
        "setwd(\"/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/run_methods\")",
        "> ",
        "# filenames",
        "> ",
        "",
        "> ",
        "DATA_DIR <- \"../../benchmark_data_sets\"",
        "> ",
        "",
        "> ",
        "files <- list(",
        "+ ",
        "  Levine_32dim = file.path(DATA_DIR, \"Levine_32dim.fcs\"), ",
        "+ ",
        "  Samusik_01 = file.path(DATA_DIR, \"Samusik_01.fcs\"), ",
        "+ ",
        "  Samusik_all  = file.path(DATA_DIR, \"Samusik_all.fcs\") ",
        "+ ",
        "  #Nilsson_rare = file.path(DATA_DIR, \"Nilsson_rare.fcs\"), ",
        "+ ",
        "  #Mosmann_rare = file.path(DATA_DIR, \"Mosmann_rare.fcs\"), ",
        "+ ",
        "  #FlowCAP_ND   = file.path(DATA_DIR, \"FlowCAP_ND.fcs\"), ",
        "+ ",
        "  #FlowCAP_WNV  = file.path(DATA_DIR, \"FlowCAP_WNV.fcs\")",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# FlowCAP data sets are treated separately since they require clustering algorithms to be",
        "> ",
        "# run individually for each sample",
        "> ",
        "",
        "> ",
        "is_FlowCAP <- c(FALSE, FALSE, FALSE)",
        "> ",
        "",
        "> ",
        "# load data files",
        "> ",
        "",
        "> ",
        "data <- vector(\"list\", length(files))",
        "> ",
        "names(data) <- names(files)",
        "> ",
        "",
        "> ",
        "#for (i in 1:1) {",
        "> ",
        "for (i in 1:length(data)) {",
        "+ ",
        "  f <- files[[i]]",
        "+ ",
        "  ",
        "+ ",
        "  if (!is_FlowCAP[i]) {",
        "+ ",
        "    data[[i]] <- flowCore::exprs(flowCore::read.FCS(f, transformation = FALSE, truncate_max_range = FALSE))",
        "+ ",
        "    ",
        "+ ",
        "  } else {",
        "+ ",
        "    smp <- flowCore::exprs(flowCore::read.FCS(f, transformation = FALSE, truncate_max_range = FALSE))",
        "+ ",
        "    smp <- smp[, \"sample\"]",
        "+ ",
        "    d <- flowCore::read.FCS(f, transformation = FALSE, truncate_max_range = FALSE)",
        "+ ",
        "    d <- flowCore::split(d, smp)",
        "+ ",
        "    data[[i]] <- lapply(d, function(s) flowCore::exprs(s))",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "head(data[[1]])",
        "     Time Cell_length     DNA1     DNA2       CD45RA       CD133          CD19\n[1,] 1024          22 4.391057 4.617262  0.162691191 -0.02958504 -0.0066963383\n[2,] 1024          35 4.340481 4.816692  0.701348484 -0.03827994 -0.0166539997\n[3,] 1024          32 3.838727 4.386369  0.603568316 -0.03221554  0.0738553926\n[4,] 1024          29 4.255805 4.830048  0.433747292 -0.02761078 -0.0176613089\n[5,] 1024          25 3.976909 4.506433 -0.008809284 -0.03029726  0.0804229081\n[6,] 1024          28 3.967840 4.870732",
        "  0.228084490 -0.02949975 -0.0003585234\n            CD22        CD11b          CD4          CD8        CD34        Flt3\n[1,]  0.06638791 -0.009184359  0.363601863  0.520195007 -0.01280518  0.36410955\n[2,]  0.07440887  0.808031023 -0.035424270 -0.010551305  0.08946739  4.20218849\n[3,] -0.04297718 -0.001880852 -0.008780609 -0.005631997 -0.02871652 -0.02548383\n[4,] -0.04407180  0.733698368 -0.019065799  0.056108583 -0.02741949 -0.03801408\n[5,]  0.49579105  1.107626915  0.552745759  0.031310461 -0.03889519  0.42379457",
        "\n[6,] -0.02995012  0.301333189 -0.035081904 -0.005862127 -0.02489572 -0.04479014\n            CD20       CXCR4    CD235ab     CD45    CD123     CD321         CD14\n[1,]  0.01689822  2.30549860 0.08439911 4.669694 3.153014 0.3711901 -0.003797231\n[2,]  0.20589532  3.44894361 0.17385577 4.260693 3.800547 2.6674583  0.156955019\n[3,] -0.03065577 -0.03022916 0.23973301 4.444309 4.426033 0.9909269  0.204939827\n[4,]  0.45865840  0.41288075 0.13593437 4.398659 4.731235 1.8114845  0.018415540\n[5,]  0.32936051  0.54085255",
        " 0.66092861 4.628554 4.111607 2.7714913 -0.029570684\n[6,]  0.43240210  0.06412722 0.29841450 3.836489 3.663516 1.6206113 -0.001539141\n            CD33     CD47        CD11c          CD7         CD15        CD16\n[1,]  0.07208903 2.738250 -0.038873121 -0.005931675 -0.025029719  0.92746747\n[2,]  0.12034149 2.614153  0.248206779  0.110278480  0.079634324  0.04365463\n[3,] -0.02519192 3.373106 -0.002649760 -0.021735111  0.095986746 -0.01242448\n[4,]  0.10514838 2.765741 -0.019202022  0.251342863 -0.001633659 -0.03743781",
        "\n[5,]  0.13258661 3.639228 -0.009925094 -0.037328489  0.068959817 -0.01799040\n[6,]  0.18790200 3.422039 -0.006898449 -0.020704636  0.202065662 -0.00274195\n         CD44     CD38       CD13         CD3         CD61        CD117     CD49d\n[1,] 3.127165 1.395208 0.03855164 -0.03259582 -0.002936137  0.053050041 0.8535053\n[2,] 3.444925 3.448410 1.45732617 -0.04346590  1.258437276  0.089660108 0.1978185\n[3,] 4.129121 1.513209 0.21358328  0.32079151  0.257136881  0.046222314 2.5866697\n[4,] 3.533507 4.147996 0.51434869",
        "  0.06044275 -0.041140232  0.066470273 1.3386694\n[5,] 2.896872 3.711521 0.58571190  0.13718580  0.168608516 -0.006223373 0.1809238\n[6,] 3.154697 3.071618 0.94570696 -0.03796809 -0.023240605 -0.043678127 0.3923147\n        HLA-DR         CD64         CD41   Viability file_number event_number label\n[1,] 1.6644801 -0.005375527 -0.001960868  0.64842892    3.627711          307     1\n[2,] 0.4915924  0.144813642  0.868013918  0.56138355    3.627711          545     1\n[3,] 1.3083367 -0.010960676 -0.010413161  0.64333671",
        "    3.627711         1024     1\n[4,] 0.1405230 -0.013448916 -0.026039254 -0.02652323    3.627711         1024     1\n[5,] 0.1973322  0.076167300 -0.040488150  0.28328723    3.627711         1024     1\n[6,] 0.1959450  0.106495775 -0.004606085 -0.01333404    3.627711         1024     1\n     individual\n[1,]          1\n[2,]          1\n[3,]          1\n[4,]          1\n[5,]          1\n[6,]          1\n",
        "> ",
        "",
        "> ",
        "sapply(data, length)",
        "Levine_32dim   Samusik_01  Samusik_all \n     6619163      4690656     45448776 \n",
        "> ",
        "",
        "> ",
        "sapply(data[!is_FlowCAP], dim)",
        "     Levine_32dim Samusik_01 Samusik_all\n[1,]       161443      86864      841644\n[2,]           41         54          54\n",
        "> ",
        "sapply(data[is_FlowCAP], function(d) {",
        "+ ",
        "  sapply(d, function(d2) {",
        "+ ",
        "    dim(d2)",
        "+ ",
        "  })",
        "+ ",
        "})",
        "named list()\n",
        "> ",
        "",
        "> ",
        "#Remove cells without labels from data",
        "> ",
        "#For now not done: subsampling for data sets with excessive runtime (> 12 hrs on server)",
        "> ",
        "",
        "> ",
        "ix_subsample <- 1:3",
        "> ",
        "n_sub <- 1000000000000",
        "> ",
        "",
        "> ",
        "for (i in ix_subsample) {",
        "+ ",
        "  if (!is_FlowCAP[i]) {",
        "+ ",
        "    set.seed(123)",
        "+ ",
        "    data[[i]] <- data[[i]][, ]",
        "+ ",
        "    # save subsampled population IDs",
        "+ ",
        "    true_labels_i <- data[[i]][, \"label\", drop = FALSE]",
        "+ ",
        "    files_true_labels_i <- paste0(\"../../results/auto/DensVM/true_labels_DensVM_\", ",
        "+ ",
        "                                  names(data)[i], \".txt\")",
        "+ ",
        "    for (f in files_true_labels_i) {",
        "+ ",
        "      write.table(true_labels_i, file = f, row.names = FALSE, quote = FALSE, sep = \"\\t\")",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "  } else {",
        "+ ",
        "    # FlowCAP data sets",
        "+ ",
        "    for (j in 1:length(data[[i]])) {",
        "+ ",
        "      set.seed(123)",
        "+ ",
        "      data[[i]][[j]] <- data[[i]][[j]][, ]",
        "+ ",
        "      # save subsampled population IDs",
        "+ ",
        "      true_labels_ij <- data[[i]][[j]][, \"label\", drop = FALSE]",
        "+ ",
        "      files_true_labels_ij <- paste0(\"../../results/auto/DensVM/true_labels_DensVM_\", ",
        "+ ",
        "                                     names(data)[i], \"_\", j, \".txt\")",
        "+ ",
        "      for (f in files_true_labels_ij) {",
        "+ ",
        "        write.table(true_labels_ij, file = f, row.names = FALSE, quote = FALSE, sep = \"\\t\")",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# indices of protein marker columns",
        "> ",
        "",
        "> ",
        "marker_cols <- list(",
        "+ ",
        "  Levine_32dim = 5:36, ",
        "+ ",
        "  #Levine_13dim = 1:13, ",
        "+ ",
        "  Samusik_01   = 9:47, ",
        "+ ",
        "  Samusik_all  = 9:47, ",
        "+ ",
        "  Nilsson_rare = c(5:7, 9:18), ",
        "+ ",
        "  Mosmann_rare = c(7:9, 11:21), ",
        "+ ",
        "  FlowCAP_ND   = 3:13, #keep the label ",
        "+ ",
        "  FlowCAP_WNV  = 3:8",
        "+ ",
        ")",
        "> ",
        "sapply(marker_cols, length)",
        "Levine_32dim   Samusik_01  Samusik_all Nilsson_rare Mosmann_rare   FlowCAP_ND \n          32           39           39           13           14           11 \n FlowCAP_WNV \n           6 \n",
        "> ",
        "",
        "> ",
        "# subset data: protein marker columns only",
        "> ",
        "",
        "> ",
        "for (i in 1:length(data)) {",
        "+ ",
        "  if (!is_FlowCAP[i]) {",
        "+ ",
        "    data[[i]] <- data[[i]][, marker_cols[[i]]]",
        "+ ",
        "  } else {",
        "+ ",
        "    for (j in 1:length(data[[i]])) {",
        "+ ",
        "      data[[i]][[j]] <- data[[i]][[j]][, marker_cols[[i]]]",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "sapply(data[!is_FlowCAP], dim)",
        "     Levine_32dim Samusik_01 Samusik_all\n[1,]       161443      86864      841644\n[2,]           32         39          39\n",
        "> ",
        "sapply(data[is_FlowCAP], function(d) {",
        "+ ",
        "  sapply(d, function(d2) {",
        "+ ",
        "    dim(d2)",
        "+ ",
        "  })",
        "+ ",
        "})",
        "named list()\n",
        "> ",
        "",
        "> ",
        "marker_names<- lapply(data, colnames)",
        "> ",
        "#save(marker_names,  file=paste0(DATA_DIR, '/marker_names.RData'))",
        "> ",
        "",
        "> ",
        "####################################################",
        "> ",
        "### load truth (manual gating population labels) ###",
        "> ",
        "####################################################",
        "> ",
        "",
        "> ",
        "# files with true population labels (subsampled labels if subsampling was required for",
        "> ",
        "# this method; see parameters spreadsheet)",
        "> ",
        "MANUAL_DENSITYCUT <- \"../../results/manual/densityCut\"",
        "> ",
        "files_truth <- list(",
        "+ ",
        "  Levine_32dim = file.path(MANUAL_DENSITYCUT, \"true_labels_densityCut_Levine_32dim.txt\"), ",
        "+ ",
        "  Samusik_01   = file.path(MANUAL_DENSITYCUT, \"true_labels_densityCut_Samusik_01.txt\"), ",
        "+ ",
        "  Samusik_all  = file.path(MANUAL_DENSITYCUT, \"true_labels_densityCut_Samusik_all.txt\") ",
        "+ ",
        "  #Nilsson_rare = file.path(MANUAL_DENSITYCUT, \"true_labels_densityCut_Nilsson_rare.txt\"), ",
        "+ ",
        "  #Mosmann_rare = file.path(MANUAL_DENSITYCUT, \"true_labels_densityCut_Mosmann_rare.txt\") ",
        "+ ",
        "  #FlowCAP_ND   = file.path(MANUAL_DENSITYCUT, \"true_labels_densityCut_FlowCAP_ND.txt\"), ",
        "+ ",
        "  #FlowCAP_WNV  = file.path(MANUAL_DENSITYCUT, \"true_labels_densityCut_FlowCAP_WNV.txt\")",
        "+ ",
        ")",
        "> ",
        "# extract true population labels",
        "> ",
        "",
        "> ",
        "clus_truth <- vector(\"list\", length(files_truth))",
        "> ",
        "names(clus_truth) <- names(files_truth)",
        "> ",
        "",
        "> ",
        "#for (i in 1) {",
        "> ",
        "for (i in 2:length(clus_truth)) {",
        "+ ",
        "  ",
        "+ ",
        "  data_truth_i <- read.table(files_truth[[i]], header = TRUE, stringsAsFactors = FALSE)[, \"label\"]",
        "+ ",
        "  clus_truth[[i]] <- data_truth_i",
        "+ ",
        "}",
        "> ",
        "clus_truth[[1]] <- as.integer(unlist(read.table(file = \"../../results/manual/densityCut/true_labels_densityCut_Levine_32dim.txt\", header=FALSE)))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "sapply(clus_truth, length)",
        "Levine_32dim   Samusik_01  Samusik_all \n      161443        86864       841644 \n",
        "> ",
        "",
        "> ",
        "# cluster sizes and number of clusters",
        "> ",
        "# (for data sets with single rare population: 1 = rare population of interest, 0 = all others)",
        "> ",
        "",
        "> ",
        "tbl_truth <- lapply(clus_truth, table)",
        "> ",
        "",
        "> ",
        "tbl_truth",
        "$Levine_32dim\n\n    1     2     3     4     5     6     7     8     9    10    11    12    13    14 \n 1207  3905  2248  3295   304   916 26366 20108 16520 21099  1238   330  6135   513 \n\n$Samusik_01\n\n    1     2     3     4     5     6     7     8     9    10    11    12    13    14 \n  266   292   406   798 13607    59   197  5173    35   703     3  3508  8768  1123 \n   15    16    17    18    19    20    21    22    23    24 \n12045   199   116   420   197   189   961  1016  2974   118 \n\n$Samusik_all\n\n     1 ",
        "     2      3      4      5      6      7      8      9     10     11     12 \n  4241   4067   5646  12479  99356    480   2041  53495    387   6068     29  49717 \n    13     14     15     16     17     18     19     20     21     22     23     24 \n114412  21137  82384   2980   1084   5469   1229   3324   8479   7855  26421   1606 \n\n",
        "> ",
        "sapply(tbl_truth, length)",
        "Levine_32dim   Samusik_01  Samusik_all \n          14           24           24 \n",
        "> ",
        "",
        "> ",
        "# store named objects (for other scripts)",
        "> ",
        "",
        "> ",
        "files_truth_PhenoGraph <- files_truth",
        "> ",
        "clus_truth_PhenoGraph <- clus_truth",
        "> ",
        "###########################################################################################",
        "> ",
        "#########################################################################################",
        "> ",
        "#load precomuted L1 distances",
        "> ",
        "JAC_DIR = '/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/results/kk30L1'",
        "> ",
        "files <- list(",
        "+ ",
        "  Levine_32dim = file.path(JAC_DIR, \"j30Levine_32dim.txt\"), ",
        "+ ",
        "  Samusik_01   = file.path(JAC_DIR, \"j30Samusik_01.txt\"), ",
        "+ ",
        "  Samusik_all  = file.path(JAC_DIR, \"j30Samusik_all.txt\")",
        "+ ",
        "  #Nilsson_rare = file.path(DATA_DIR, \"Nilsson_rare.fcs\"), ",
        "+ ",
        "  #Mosmann_rare = file.path(DATA_DIR, \"Mosmann_rare.fcs\"), ",
        "+ ",
        "  #FlowCAP_ND   = file.path(DATA_DIR, \"FlowCAP_ND.fcs\"), ",
        "+ ",
        "  #FlowCAP_WNV  = file.path(DATA_DIR, \"FlowCAP_WNV.fcs\")",
        "+ ",
        ")",
        "> ",
        "",
        "> ",
        "#NNDIR<-\"/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/results/kk105L2\"",
        "> ",
        "#nndist105 <- list(",
        "> ",
        "#  Levine_32dim = read.table(file=file.path(NNDIR, \"distLevine_32dim.txt\")), ",
        "> ",
        "#  Samusik_01   = read.table(file=file.path(NNDIR, \"distSamusik_01.txt\")), ",
        "> ",
        "#  Samusik_all  = read.table(file=file.path(NNDIR, \"distSamusik_all.txt\"))",
        "> ",
        "#Nilsson_rare = file.path(DATA_DIR, \"Nilsson_rare.fcs\"), ",
        "> ",
        "#Mosmann_rare = file.path(DATA_DIR, \"Mosmann_rare.fcs\"), ",
        "> ",
        "#FlowCAP_ND   = file.path(DATA_DIR, \"FlowCAP_ND.fcs\"), ",
        "> ",
        "#FlowCAP_WNV  = file.path(DATA_DIR, \"FlowCAP_WNV.fcs\")",
        "> ",
        "#)",
        "> ",
        "#nnind105 <- list(",
        "> ",
        "#  Levine_32dim = read.table(file=file.path(NNDIR, \"indLevine_32dim.txt\")), ",
        "> ",
        "#  Samusik_01   = read.table(file=file.path(NNDIR, \"indSamusik_01.txt\")), ",
        "> ",
        "#  Samusik_all  = read.table(file=file.path(NNDIR, \"indSamusik_all.txt\"))",
        "> ",
        "#Nilsson_rare = file.path(DATA_DIR, \"Nilsson_rare.fcs\"), ",
        "> ",
        "#Mosmann_rare = file.path(DATA_DIR, \"Mosmann_rare.fcs\"), ",
        "> ",
        "#FlowCAP_ND   = file.path(DATA_DIR, \"FlowCAP_ND.fcs\"), ",
        "> ",
        "#FlowCAP_WNV  = file.path(DATA_DIR, \"FlowCAP_WNV.fcs\")",
        "> ",
        "#)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#jaccard_l<- vector(\"list\", length(files))",
        "> ",
        "#for (i in 1:length(data)) {",
        "> ",
        "#  f <- files[[i]]",
        "> ",
        "#  jaccard_l[[i]]<-read.table(file=f, header = FALSE)",
        "> ",
        "#}",
        "> ",
        "#lapply(jaccard_l, dim)",
        "> ",
        "source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_louvain_multiple_runs.R')",
        "> ",
        "#source('/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/helpers/helper_random_forest.R')",
        "> ",
        "#########################################################################################################",
        "> ",
        "clus_assign<-vector(\"list\", length(files_truth))",
        "> ",
        "louvain_assign<-vector(\"list\", length(files_truth))",
        "> ",
        "postprocess_assign <- vector(\"list\", length(files_truth))",
        "> ",
        "",
        "> ",
        "######################################################",
        "> ",
        "clus_truthL<-lapply(clus_truth, function(x) ifelse(is.na(x),1000, x ))",
        "> ",
        "",
        "> ",
        "##################################################################################",
        "> ",
        "# algorithm starts here",
        "> ",
        "ref_subs<- vector(\"list\", length(files_truth))",
        "> ",
        "localisation<- vector(\"list\", length(files_truth))",
        "> ",
        "max_density<- vector(\"list\", length(files_truth))",
        "> ",
        "clust_out<- vector(\"list\", length(files_truth))",
        "> ",
        "inGOlist <- vector(\"list\", length(files_truth)) ",
        "> ",
        "GOmat<- vector(\"list\", length(files_truth))",
        "> ",
        "LOmat<- vector(\"list\", length(files_truth))",
        "> ",
        "COmat<- vector(\"list\", length(files_truth))",
        "> ",
        "clust_out<- vector(\"list\", length(files_truth))",
        "> ",
        "clust_out2<- vector(\"list\", length(files_truth))",
        "> ",
        "clust_out3<- vector(\"list\", length(files_truth))",
        "> ",
        "graph<- vector(\"list\", length(files_truth))",
        "> ",
        "graph2<- vector(\"list\", length(files_truth))",
        "> ",
        "graph3<- vector(\"list\", length(files_truth))",
        "> ",
        "cluster_assign<- vector(\"list\", length(files_truth))",
        "> ",
        "cluster_assign2<- vector(\"list\", length(files_truth))",
        "> ",
        "cluster_assign3<- vector(\"list\", length(files_truth))",
        "> ",
        "",
        "> ",
        "#load clustering results without oulier assignments to learn reference set",
        "> ",
        "load(file=paste0('../../results/outlier_compare/Louvain_L2_k30.RData'))",
        "> ",
        "clus_assign<-clus_assign[c(1,3,4)]",
        "> ",
        "clus_assign[[1]]<-as.integer(unlist(read.table(file= '../../results/auto/phenoGraph/Levine_32dim.txt', header=FALSE)))",
        "> ",
        "save(data[[3]], file='841K.RData')",
        "Error in save(data[[3]], file = \"841K.RData\") : \n  object ‘data[[3]]’ not found\n",
        "> ",
        "d=data[[3]]",
        "> ",
        "save(data[[3]], file='841K.RData')",
        "Error in save(data[[3]], file = \"841K.RData\") : \n  object ‘data[[3]]’ not found\n",
        "> ",
        "save(d, file='841K.RData')",
        "> ",
        "getwd()",
        "[1] \"/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/Rscripts/run_methods\"\n",
        "> ",
        "load(\"/media/sgrinek/6BB5-5B73/841K.RData\")",
        "\nRestarting R session...\n\n",
        "> ",
        "library(stsne)",
        "> ",
        "system.time(z<-tree_search(data[1:100000,], 30, 10))",
        "Error in data[1:1e+05, ] : incorrect number of dimensions\n",
        "Timing stopped at: 0 0 0.001\n",
        "> ",
        "system.time(z<-tree_search(d[1:100000,], 30, 10))",
        "Error in tree_search(d[1:1e+05, ], 30, 10) : \n  argument \"num_threads_\" is missing, with no default\n",
        "Timing stopped at: 0.072 0.004 0.074\n",
        "> ",
        "system.time(tree<-tree_create(d[1:100000,], 30, 10))",
        "Error in tree_create(d[1:1e+05, ], 30, 10) : unused argument (10)\n",
        "Timing stopped at: 0 0 0\n",
        "> ",
        "system.time(tree<-tree_create(d[1:100000,],  10))",
        "Generating euclidean tree.... 1 \nGenerating euclidean tree.... 2 \nGenerating euclidean tree.... 3 \n   user  system elapsed \n  0.768   0.204   0.645 \n",
        "> ",
        "system.time(tree<-tree_search(tree, d[1:100000,],  10))",
        "Error in tree_search(tree, d[1:1e+05, ], 10) : \n  argument \"num_threads_\" is missing, with no default\n",
        "Timing stopped at: 0.04 0 0.039\n",
        "> ",
        "system.time(tree<-tree_search(tree, d[1:100000,],  30, 12))",
        "Generating euclidean tree.... 2 \nSearching .... 3 \n   user  system elapsed \n 37.548   0.000   3.486 \n",
        "> ",
        "system.time(tree<-tree_search(tree, d,  30, 12))",
        "Error in tree_search(tree, d, 30, 12) : \n  Expecting an external pointer: [type=list].\n",
        "Timing stopped at: 0.004 0 0.002\n",
        "> ",
        "system.time(tree<-tree_search(tree, d,  30, 12))",
        "Error in tree_search(tree, d, 30, 12) : \n  Expecting an external pointer: [type=list].\n",
        "Timing stopped at: 0 0 0.001\n",
        "> ",
        "system.time(tree<-tree_create(d,  10))",
        "Generating euclidean tree.... 1 \nGenerating euclidean tree.... 2 \nGenerating euclidean tree.... 3 \n   user  system elapsed \n  6.496   1.760   5.997 \n",
        "> ",
        "system.time(zzz<-tree_search(tree, d,  30, 12))",
        "Generating euclidean tree.... 2 \nSearching .... 3 \n    user   system  elapsed \n1062.772    0.360   94.183 \n",
        "> ",
        "system.time(zzz<-tree_search(tree, d,  30, 12))",
        "Generating euclidean tree.... 2 \nSearching .... 3 \n    user   system  elapsed \n1058.256    0.372   96.038 \n",
        "> ",
        "View(z$idx)",
        "> ",
        "View(z$dist)",
        "> ",
        "NNDIR<-\"/mnt/f/Brinkman group/current/Stepan/RobinsonFlowComparisonALL/results/kk105L2\"",
        "> ",
        "nndist105 <- list(",
        "+ ",
        "  Levine_32dim = read.table(file=file.path(NNDIR, \"distLevine_32dim.txt\")), ",
        "+ ",
        "  Samusik_01   = read.table(file=file.path(NNDIR, \"distSamusik_01.txt\")), ",
        "+ ",
        "  Samusik_all  = read.table(file=file.path(NNDIR, \"distSamusik_all.txt\"))",
        "+ ",
        "#Nilsson_rare = file.path(DATA_DIR, \"Nilsson_rare.fcs\"), ",
        "+ ",
        "#Mosmann_rare = file.path(DATA_DIR, \"Mosmann_rare.fcs\"), ",
        "+ ",
        "#FlowCAP_ND   = file.path(DATA_DIR, \"FlowCAP_ND.fcs\"), ",
        "+ ",
        "#FlowCAP_WNV  = file.path(DATA_DIR, \"FlowCAP_WNV.fcs\")",
        "+ ",
        ")",
        "> ",
        "nnind105 <- list(",
        "+ ",
        "  Levine_32dim = read.table(file=file.path(NNDIR, \"indLevine_32dim.txt\")), ",
        "+ ",
        "  Samusik_01   = read.table(file=file.path(NNDIR, \"indSamusik_01.txt\")), ",
        "+ ",
        "  Samusik_all  = read.table(file=file.path(NNDIR, \"indSamusik_all.txt\"))",
        "+ ",
        "#Nilsson_rare = file.path(DATA_DIR, \"Nilsson_rare.fcs\"), ",
        "+ ",
        "#Mosmann_rare = file.path(DATA_DIR, \"Mosmann_rare.fcs\"), ",
        "+ ",
        "#FlowCAP_ND   = file.path(DATA_DIR, \"FlowCAP_ND.fcs\"), ",
        "+ ",
        "#FlowCAP_WNV  = file.path(DATA_DIR, \"FlowCAP_WNV.fcs\")",
        "+ ",
        ")",
        "> ",
        "View(nnind105[[3]])",
        "> ",
        "View(nnidx105[[3]])",
        "Error in View : object 'nnidx105' not found\n",
        "> ",
        "View(nndist105[[3]])",
        "> ",
        "dim(d)",
        "[1] 841644     39\n",
        "> ",
        "system.time(tree<-tree_create(d,  10))",
        "Generating euclidean tree.... 1 \nGenerating euclidean tree.... 2 \nGenerating euclidean tree.... 3 \n   user  system elapsed \n  6.420   1.884   5.884 \n",
        "> ",
        "system.time(zzz<-tree_search(tree, d,  30, 12))",
        "Generating euclidean tree.... 2 \nSearching .... 3 \n    user   system  elapsed \n1124.132    0.500  101.717 \n",
        "> ",
        "View(zzz$idx)",
        "> ",
        "View(zzz$dist)",
        "> ",
        "sqrt(4.15)",
        "[1] 2.037155\n",
        "> ",
        "system.time(zzz<-tree_search(tree, d,  30, 12))",
        "Generating euclidean tree.... 2 \nSearching .... 3 \n    user   system  elapsed \n1116.372    0.508  108.271 \n",
        "> ",
        "gc()",
        "            used   (Mb) gc trigger   (Mb)  max used   (Mb)\nNcells   3856900  206.0   12002346  641.0   7463253  398.6\nVcells 424622116 3239.7  710336369 5419.5 641972842 4897.9\n\nRestarting R session...\n\n"
    ],
    "type" : [
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2
    ]
}